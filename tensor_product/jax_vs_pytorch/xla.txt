tmp_0 = parameter(0), sharding={replicated}
tmp_1 = constant({...})
tmp_2 = parameter(2), sharding={replicated}
tmp_3 = parameter(1), sharding={replicated}
tmp_4 = fusion(tmp_3, tmp_2), kind=kLoop, calls=
(param_0: f32[10,1,3], param_1: f32[10,1,3]) -> f32[10,9] {
  tmp_0 = parameter(1)
  tmp_1 = bitcast(tmp_0)
  tmp_2 = broadcast(tmp_1), dimensions={0,1}
  tmp_3 = parameter(0)
  tmp_4 = bitcast(tmp_3)
  tmp_5 = broadcast(tmp_4), dimensions={0,2}
  tmp_6 = multiply(tmp_2, tmp_5)
  ROOT tmp_7 = bitcast(tmp_6)
}
tmp_5 = custom-call(tmp_4, tmp_1), custom_call_target="__cublas$gemm"
ROOT tmp_6 = fusion(tmp_5, tmp_0), kind=kLoop, calls=
(param_0: f32[10,3], param_1: f32[1,1,1]) -> (f32[], f32[1,1,1]) {
  tmp_0 = parameter(1)
  tmp_1 = bitcast(tmp_0)
  tmp_2 = broadcast(tmp_1), dimensions={}
  tmp_3 = parameter(0)
  tmp_4 = multiply(tmp_2, tmp_3)
  tmp_5 = tanh(tmp_4)
  tmp_6 = bitcast(tmp_5)
  tmp_7 = constant(0)
  tmp_8 = reduce(tmp_6, tmp_7), dimensions={0}, to_apply=
  (scalar_lhs: f32[], scalar_rhs: f32[]) -> f32[] {
    tmp_0 = parameter(0)
    tmp_1 = parameter(1)
    ROOT tmp_2 = add(tmp_0, tmp_1)
  }
  tmp_9 = add(tmp_8, tmp_8)
  tmp_10 = constant(1)
  tmp_11 = broadcast(tmp_10), dimensions={}
  tmp_12 = bitcast(tmp_5)
  tmp_13 = subtract(tmp_11, tmp_12)
  tmp_14 = multiply(tmp_13, tmp_12)
  tmp_15 = add(tmp_13, tmp_14)
  tmp_16 = broadcast(tmp_10), dimensions={}
  tmp_17 = subtract(tmp_16, tmp_5)
  tmp_18 = multiply(tmp_17, tmp_5)
  tmp_19 = add(tmp_17, tmp_18)
  tmp_20 = bitcast(tmp_19)
  tmp_21 = add(tmp_15, tmp_20)
  tmp_22 = bitcast(tmp_21)
  tmp_23 = bitcast(tmp_3)
  tmp_24 = multiply(tmp_22, tmp_23)
  tmp_25 = reduce(tmp_24, tmp_7), dimensions={0}, to_apply=
  (scalar_lhs: f32[], scalar_rhs: f32[]) -> f32[] {
    tmp_0 = parameter(0)
    tmp_1 = parameter(1)
    ROOT tmp_2 = add(tmp_0, tmp_1)
  }
  tmp_26 = bitcast(tmp_25)
  ROOT tmp_27 = tuple(tmp_9, tmp_26)
}, frontend_attributes={fingerprint_before_lhs="b8e472b3d3fdaac50186260a37434eea"}